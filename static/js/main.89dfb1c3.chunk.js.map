{"version":3,"sources":["logo.svg","Hooks/useDependency.js","components/SearchPlayer.js","components/UserComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","count","dependencies","reducer","state","action","type","Error","withRouter","callback","useState","inputUser","setInputUser","users","setUsers","useReducer","dispatch","console","log","useDependency","dependency","dAdd","dDelete","history","useHistory","userItem","user","key","p_id","className","onClick","id","push","p_name","onSubmit","event","axios","get","then","response","data","results","finally","preventDefault","placeholder","onChange","target","value","icon","faSearch","size","color","map","UserComponent","userId","useParams","App","setUserId","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89dfb1c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {useState, useReducer} from \"react\";\r\n\r\nconst initialState = {count: 0, dependencies: false};\r\n\r\nconst reducer = (state, action) => {\r\n    let count = state.count;\r\n    let dependencies = state.dependencies;\r\n\r\n    switch(action.type) {\r\n        case 'add':\r\n            if(state.count === 0) dependencies = true;\r\n            count++;\r\n\r\n            return {count, dependencies};\r\n        case 'delete':\r\n            if(state.count === 1) dependencies = false;\r\n            count--;\r\n\r\n            return {count, dependencies}\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n\r\nconst useDependency = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const addDependecy = () => {\r\n        console.log(\"counter before add \");\r\n        console.log(state);\r\n        dispatch({type: 'add'});\r\n    };\r\n\r\n    const deleteDependency = () => {\r\n        console.log(\"counter before delete \");\r\n        console.log(state);\r\n        dispatch({type: 'delete'});\r\n    };\r\n\r\n    return [state.dependencies, addDependecy, deleteDependency];\r\n};\r\nexport {useDependency};","import React, {useState} from \"react\";\r\nimport {useHistory, withRouter} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport {useDependency} from \"../Hooks/useDependency\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport \"../css/list.css\";\r\n\r\nconst SearchPlayer = ({callback}) => {\r\n    const [inputUser, setInputUser] = useState(\"\");\r\n    const [users, setUsers] = useState(null);\r\n\r\n    const [dependency, dAdd, dDelete] = useDependency();\r\n\r\n    let history = useHistory();\r\n\r\n    const getUsers = () => {\r\n        const searchAPI = \"https://r6tab.com/api/search.php?platform=uplay&search=\";\r\n\r\n        dAdd();\r\n\r\n        axios.get(searchAPI + inputUser)\r\n            .then((response) => {\r\n                console.log(response);\r\n                setUsers(response.data.results);\r\n                //callback(2);\r\n                //history.push(\"/user\");\r\n            })\r\n            .finally((response) => {\r\n                dDelete();\r\n            })\r\n    };\r\n\r\n    const setUser = (id) => {\r\n        history.push(`/user/${id}`);\r\n    };\r\n\r\n    const usersSection = () => {\r\n        return (\r\n            <div className={\"col-6\"}>\r\n                <div className={\"users-list\"}>\r\n                    {users ? users.map(userItem) : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const userItem = (user) => {\r\n        return (\r\n            <div key={user.p_id} className={\"user\"} onClick={() => setUser(user.p_id)}>\r\n                <div className={\"name\"}>{user.p_name}</div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setInputUser(event.target.value);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        getUsers();\r\n        event.preventDefault();\r\n    };\r\n\r\n    const loadingSection = () => {\r\n        return (\r\n            <div className={\"loading\"}>\r\n                <ClipLoader size={50} color={\"#09d3ac\"} />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            <div className={\"container\"}>\r\n                <div className={\"row justify-center\"}>\r\n                    <div className={\"col-12\"}>\r\n                        <div className={\"title\"}>Rainbow Six Siege Stats</div>\r\n                    </div>\r\n                    <form className={\"col-6\"} onSubmit={handleSubmit}>\r\n                        <input placeholder={\"Type your username in R6\"} onChange={handleChange}>\r\n                        </input>\r\n                        <FontAwesomeIcon className={\"ml-3\"} icon={faSearch}/>\r\n                    </form>\r\n                </div>\r\n                <div className={\"row justify-center\"}>\r\n                    {dependency ? loadingSection() : usersSection()}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default withRouter(SearchPlayer);","import React from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst UserComponent = () => {\r\n    let {userId} = useParams();\r\n\r\n    return (\r\n        <div>User with id: {userId}</div>\r\n    );\r\n};\r\nexport default UserComponent;","import React, {useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/theme.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport SearchPlayer from \"./components/SearchPlayer\";\nimport UserComponent from \"./components/UserComponent\";\n\nfunction App() {\n  const [userId, setUserId] = useState(null);\n\n  const setUserIdCallback = (userId) => {\n    setUserId(userId);\n    console.log(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path={\"/\"}>\n            <SearchPlayer callback={setUserIdCallback}/>\n          </Route>\n          <Route path={\"/user/:userId\"} >\n            <UserComponent userId={userId}/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}